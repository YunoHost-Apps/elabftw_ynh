#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."  --weight=2

# Move sources to subdir
if [ ! -d "$install_dir/live" ]; then
    mv "$install_dir/sources/" "$install_dir/live/"

	ynh_script_progression --message="Removing NodeJS..." --weight=1
	# Remove NodeJS
	ynh_remove_nodejs
fi

if ynh_compare_current_package_version --comparison lt --version 4.5.14~ynh
then
    ynh_secure_remove --file="$install_dir/config.php"
    ynh_delete_file_checksum --file="$install_dir/config.php"
    ynh_add_config --template="elabftw_env" --destination="$install_dir/elabftw_env"

    elabimg_build_id=$(ynh_string_random --length=8 --filter="0-9a-f");
    ynh_app_setting_set_default --app=$app --key="elabimg_build_id" --value="$elabimg_build_id"
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Upgrading source files..." --weight=7

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir/docker/" --source_id="docker"

mv $install_dir/live/uploads/ $install_dir/uploads/
ynh_secure_remove --file="$install_dir/live/"
mkdir -p "$install_dir/live/"
rsync -a "$install_dir/docker/elabftw/" "$install_dir/live/"
mv $install_dir/uploads/ $install_dir/live/uploads/

ynh_secure_remove --file="$install_dir/docker"

mkdir -p "$install_dir/live/"{cache,uploads}

# Fix Unknown collation: 'utf8mb4_0900_ai_ci'
for f in $install_dir/live/src/sql/*.sql ; do
    ynh_replace_string --match_string="utf8mb4_0900_ai_ci" --replace_string="utf8mb4_general_ci" --target_file="$f"
    ynh_replace_string --match_string="SET SESSION sql_require_primary_key = 0;" --replace_string="" --target_file="$f"

done

ynh_replace_string --match_string="\$mysqlVersion = (int) substr(\$this->Db->getAttribute(PDO::ATTR_SERVER_VERSION) ?? '1', 0, 1);" --replace_string="\$mysqlVersion = 10;" --target_file="$install_dir/live/src/classes/Update.php"

chmod -R o-rwx "$install_dir"
chown -R "$app:www-data" "$install_dir"

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating $app's configuration files..." --weight=30

pushd "$install_dir/live"
    ynh_add_config --template="elabftw_env" --destination="$install_dir/elabftw_env"
    ynh_exec_as "$app" bash -c "set -a; source '$install_dir/elabftw_env'; set +a ; php$phpversion $install_dir/live/bin/console db:update"
popd

elabimg_version=$(ynh_app_upstream_version);
ynh_app_setting_set --app=$app --key="elabimg_version" --value="$elabimg_version"

# Create a cron file
ynh_add_config --template="cron" --destination="/etc/cron.d/$app"

chmod -R o-rwx "$install_dir"
chown -R "$app:www-data" "$install_dir"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression --message="Upgrading system configurations related to $app..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

# Create a dedicated PHP-FPM config
ynh_add_fpm_config

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
